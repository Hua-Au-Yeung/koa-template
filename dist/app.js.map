{"version":3,"sources":["../src/framework/module/logger.ts","../src/framework/init/env.ts","../src/framework/middleware/init-request.ts","../src/framework/router/main.ts","../src/framework/launcher.ts","../src/app/module/logger.ts","../src/app/common/utils.ts","../src/framework/middleware/http-base-auth.ts","../src/app/router/command.ts","../src/app/app.ts"],"sourcesContent":["import { DateTime } from 'luxon';\nimport path from 'path';\nimport { env } from 'process';\nimport winston from 'winston';\nimport { createLogger, format, transports } from 'winston';\nimport DailyRotateFile from 'winston-daily-rotate-file';\nimport SentryTransport from 'winston-transport-sentry-node';\n\nconst { combine, timestamp, json, errors } = format;\nexport const LOG_DIR = `${path.resolve()}/log`;\n\nexport const logFileFormatFactory = (logFileName: string) => {\n    return format((transInfo, opts) => {\n        return transInfo.file !== undefined && transInfo.file === logFileName ? transInfo : false;\n    });\n};\n\nexport const logger: winston.Logger = createLogger({\n    level: 'info',\n    format: combine(\n        errors({ stack: true }), // can log Error Object\n        timestamp({\n            format: () => {\n                return DateTime.now().toFormat('yyyy-MM-dd HH:mm:ss');\n            },\n        }),\n        json(),\n    ),\n    defaultMeta: {},\n    transports: [\n        new DailyRotateFile({\n            filename: `${LOG_DIR}/error-%DATE%.log`,\n            datePattern: 'YYYY-w', // 'YYYY-MM-DD',\n            zippedArchive: false,\n            maxSize: '20m',\n            maxFiles: '30d',\n            level: 'error',\n        }),\n        new DailyRotateFile({\n            filename: `${LOG_DIR}/all-combined-%DATE%.log`,\n            datePattern: 'YYYY-w',\n            zippedArchive: true,\n            maxSize: '20m',\n            maxFiles: '30d',\n            level: env.LOG_LEVEL || 'debug',\n        }),\n        new DailyRotateFile({\n            filename: `${LOG_DIR}/http-%DATE%.log`,\n            datePattern: 'YYYY-w',\n            zippedArchive: false,\n            maxSize: '20m',\n            maxFiles: '53',\n            level: 'info',\n            format: logFileFormatFactory('http')(),\n        }),\n        new DailyRotateFile({\n            filename: `${LOG_DIR}/framework-%DATE%.log`,\n            datePattern: 'YYYY-w',\n            zippedArchive: false,\n            maxSize: '20m',\n            maxFiles: '53',\n            level: 'info',\n            format: logFileFormatFactory('framework')(),\n        }),\n    ],\n});\n\nif (env.NODE_ENV !== 'production') {\n    if (JSON.parse(env.DEBUG || 'false')) {\n        logger.exceptions.handle(new transports.File({ filename: `${LOG_DIR}/exception.log` }));\n        logger.rejections.handle(new transports.File({ filename: `${LOG_DIR}/rejections.log` }));\n    }\n    logger.add(\n        new transports.Console({\n            level: env.LOG_LEVEL || 'debug',\n            format: format.combine(\n                format.colorize(),\n                format.simple(),\n            ),\n        }),\n    );\n}\n\nlogger.exitOnError = false;\n","import { logger } from '@framework/module/logger.js';\nimport dotenv from 'dotenv';\nimport path from 'path';\nimport { env } from 'process';\n\nif (env.NODE_ENV === 'production') {\n    logger.info('Loaded .env', { file: 'framework' });\n    dotenv.config({ path: path.resolve('.env') });\n} else {\n    env.NODE_ENV = 'develop';\n    logger.info('Loaded .env.dev', { file: 'framework' });\n    dotenv.config({ path: path.resolve('.env.dev') });\n}\n","import { logger } from '@framework/module/logger.js';\nimport crypto from 'crypto';\nimport { Next, ParameterizedContext } from 'koa';\nimport { DateTime } from 'luxon';\nimport { env } from 'process';\n\nexport const initRequest = async (ctx: ParameterizedContext<_BASEState, _BASEContext>, next: Next) => {\n    ctx.state.currentMiddleware = 'framework/init-request';\n    ctx.state.requestId = crypto.randomBytes(8).toString('hex');\n    ctx.state.requestTimestamp = Date.now();\n    logger.info(`🚀 Request[ID:${ctx.state.requestId} Starting`, { file: 'framework' });\n\n    try {\n        await next();\n    } catch (err) {\n        let error = err;\n        if (typeof err === 'object' && err !== null && 'status' in err && 'message' in err) {\n            // ctx.throw(code, ...)\n            let error = err as _KoaError;\n            ctx.status = error.status || 500;\n            if (JSON.parse(env.DEBUG || 'false')) {\n                error.expose = true;\n            }\n\n            if (error.expose) {\n                ctx.body = error.message;\n            }\n        } else {\n            ctx.status = 500;\n            if (JSON.parse(env.DEBUG || 'false')) {\n                ctx.body = err;\n            } else {\n                ctx.body = `500 Internal Server Error, ID:${ctx.state.requestId}\\n`;\n            }\n        }\n        ctx.app.emit('error', error, ctx); // not throw just emit Koa error event\n    }\n    // no try above no running below\n\n    let logLevel: string;\n    switch (ctx.response.status.toString().substring(0, 1)) {\n        case '2':\n        case '3':\n            logLevel = 'info';\n            break;\n        case '4':\n            logLevel = 'warn';\n            break;\n        case '5':\n            logLevel = 'error';\n            break;\n        default:\n            logLevel = 'info';\n    }\n    ctx.set('Request-Id', ctx.state.requestId);\n    logger.log(logLevel, `${ctx.ip} - ${ctx.request.method} - ${ctx.response.status} - ${ctx.request.url}`, {\n        file: 'http',\n        requestId: ctx.state.requestId,\n        ip: ctx.ip,\n        timestamp: DateTime.fromMillis(ctx.state.requestTimestamp).toFormat('yyyy-MM-dd HH:mm:ss'),\n        duration: Date.now() - ctx.state.requestTimestamp,\n    });\n    logger.info(`✅ Request[ID:${ctx.state.requestId} Ended`, { file: 'framework' });\n};\n","import Router from '@koa/router';\n\nexport const mainRouter = new Router<_BASEState, _BASEContext>();\n","import '@framework/init';\nimport { initRequest } from '@framework/middleware/init-request.js';\nimport { logger } from '@framework/module/logger.js';\nimport { mainRouter } from '@framework/router/main.js';\nimport Router from '@koa/router';\nimport fs from 'fs';\nimport https from 'https';\nimport Koa, { ParameterizedContext } from 'koa';\nimport { env } from 'process';\n\nconst hostname = env.HOST as string;\nconst port = parseInt(env.PORT as string);\n\nconst _app = new Koa<_BASEState, _BASEContext>();\n_app.proxy = true;\n\nconst framework_middlewares = [\n    'framework/init-request',\n    'framework/http-base-auth',\n];\n\nclass Launcher {\n    public mainRouter: Router<_BASEState, _BASEContext> = mainRouter;\n    public app: Koa<_BASEState, _BASEContext> = _app;\n    public __construct() {\n    }\n    public async run() {\n        this.app.use(initRequest)\n            .use(mainRouter.routes())\n            .use(mainRouter.allowedMethods())\n            .on('error', (err, ctx: ParameterizedContext<_BASEState, _BASEContext>) => {\n                const logMeta = {\n                    requestId: ctx.state.requestId,\n                    ip: ctx.ip,\n                };\n                if (framework_middlewares.includes(ctx.state.currentMiddleware)) {\n                    // @ts-ignore\n                    logMeta['file'] = 'framework';\n                }\n                logger.error(`❌ Error Event: ${err.toString().trim()}`, logMeta);\n            });\n\n        // https or http\n        if (JSON.parse(env.SSL || 'false')) {\n            const options = {\n                key: fs.readFileSync(env.SSL_KEY as string),\n                cert: fs.readFileSync(env.SSL_CERT as string),\n            };\n            https.createServer(options, this.app.callback()).listen(port, hostname, () => {\n                logger.info(`HTTPS server is running on https://${hostname}:${port}`, { file: 'framework' });\n            });\n        } else {\n            this.app.listen(port, hostname, () => {\n                logger.info(`HTTP server is running on http://${hostname}:${port}`, { file: 'framework' });\n            });\n        }\n    }\n}\n\nconst launcher = new Launcher();\n\nexport default launcher;\n","import { LOG_DIR, logFileFormatFactory, logger } from '@framework/module/logger.js';\nimport { env } from 'process';\nimport winston from 'winston';\nimport DailyRotateFile from 'winston-daily-rotate-file';\nimport SentryTransport from 'winston-transport-sentry-node';\n\nlogger.add(\n    new DailyRotateFile({\n        filename: `${LOG_DIR}/biz-%DATE%.log`,\n        datePattern: 'YYYY-w',\n        zippedArchive: false,\n        maxSize: '20m',\n        maxFiles: '53',\n        level: 'info',\n        format: logFileFormatFactory('biz')(),\n    }),\n);\n\nlogger.add(\n    new DailyRotateFile({\n        filename: `${LOG_DIR}/exec-%DATE%.log`,\n        datePattern: 'YYYY-w',\n        zippedArchive: false,\n        maxSize: '20m',\n        maxFiles: '53',\n        level: 'info',\n        format: logFileFormatFactory('exec')(),\n    }),\n);\n\nif (\n    JSON.parse(env.SENTRY || 'false')\n    && env.NODE_ENV === 'production'\n    && JSON.parse(env.DEBUG || 'false') === false\n) {\n    logger.add(\n        new SentryTransport.default({\n            sentry: {\n                dsn: env.SENTRY_DSN,\n            },\n            level: env.SENTRY_LOG_LEVEL,\n            format: winston.format((info) => {\n                info.tags = { NODE_ID: env.NODE_ID }; // filter message in sentry\n                return info;\n            })(),\n        }),\n    );\n}\n\nexport default logger;\n","import logger from '@app/module/logger.js';\nimport { exec } from 'child_process';\nimport { readFile } from 'fs/promises';\nimport Koa from 'koa';\nimport path from 'path';\nimport { env } from 'process';\n\nexport const my_exec = (cmd: string): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        exec(cmd, (error, stdout, stderr) => {\n            if (error) {\n                reject(error);\n                return;\n            }\n            if (stderr) {\n                reject(stderr);\n                return;\n            }\n            resolve(stdout);\n        });\n    });\n};\n\nexport const reverseProcess = (swapped: string): string => {\n    const restoredBase64 = swapped.replace(/(.)(.)/g, '$2$1');\n    return Buffer.from(restoredBase64, 'base64').toString('utf-8');\n};\n\nconst loadCmds = async () => {\n    try {\n        const data = await readFile(path.resolve('cmd.json'), 'utf-8');\n        return JSON.parse(data);\n    } catch (error) {\n        logger.error('Failed to load cmd.json:', error);\n        return {};\n    }\n};\nexport const reloadCmds = (app: Koa) => {\n    // 定时自动 cmd.json\n    setInterval(async () => {\n        app.context.cmds = await loadCmds();\n        logger.info('Reload command list');\n    }, parseInt(env.LOADCMDINTERVAL as string) || 2000);\n};\n","import { Next, ParameterizedContext } from 'koa';\nimport auth from 'koa-basic-auth';\n\nexport const httpBaseAuth = (credentials: { name: string; pass: string; }) => {\n    return async (ctx: ParameterizedContext<_BASEState, _BASEContext>, next: Next) => {\n        ctx.state.currentMiddleware = 'framework/http-base-auth';\n        await auth(credentials)(ctx, next);\n    };\n};\n","import logger from '@app/module/logger.js';\nimport { httpBaseAuth } from '@framework/middleware/http-base-auth.js';\nimport Router from '@koa/router';\nimport { ParameterizedContext } from 'koa';\nimport bodyParser from 'koa-bodyparser';\nimport { env } from 'process';\n\nimport { my_exec } from '@app/common/utils.js';\nimport fs from 'fs';\nimport path from 'path';\n\nexport const commandRouter = new Router<MYState, MYContext>();\n\ncommandRouter\n    .use(bodyParser());\n\ncommandRouter.get(\n    '/cmd/:id',\n    httpBaseAuth({\n        name: env.HTTP_BASIC_AUTH_USERNAME as string,\n        pass: env.HTTP_BASIC_AUTH_PASSWORD as string,\n    }),\n    async (ctx: ParameterizedContext<MYState, MYContext>) => {\n        const cmdId = ctx.params.id;\n        let cmd: string = (ctx.cmds as Record<string, string>)[cmdId];\n        if (cmd == undefined) {\n            ctx.status = 404;\n            ctx.body = 'There is no such command\\n';\n            return;\n        }\n\n        if (env.NODE_ENV == 'production') {\n            // cmd = reverseProcess(cmd);\n        }\n\n        return my_exec(cmd).then(ret => {\n            ctx.body = ret;\n            logger.info(ret, {\n                file: 'exec',\n                exec: { type: 'cmd', cmdId: cmdId },\n                requestId: ctx.state.requestId,\n                ip: ctx.ip,\n            });\n        }).catch(err => {\n            logger.error(err.stack, {\n                file: 'exec',\n                exec: { type: 'cmd', cmdId: cmdId },\n                requestId: ctx.state.requestId,\n                ip: ctx.ip,\n            });\n            ctx.throw(500, err.message, { expose: env.DEBUG == 'true' });\n        });\n    },\n);\n\ncommandRouter.get(\n    '/script/:name',\n    httpBaseAuth({\n        name: env.HTTP_BASIC_AUTH_USERNAME as string,\n        pass: env.HTTP_BASIC_AUTH_PASSWORD as string,\n    }),\n    async (ctx: ParameterizedContext<MYState, MYContext>) => {\n        const scriptName = ctx.params.name;\n        const scriptFile = path.resolve(`./script/${scriptName}`);\n\n        // 脚本不存在\n        if (!fs.existsSync(scriptFile)) {\n            ctx.status = 404;\n            ctx.body = 'There is no such script\\n';\n            return;\n        }\n\n        return my_exec(scriptFile).then(ret => {\n            ctx.body = ret;\n            logger.info(ret, {\n                file: 'exec',\n                exec: { type: 'script', scriptName: scriptName },\n                requestId: ctx.state.requestId,\n                ip: ctx.ip,\n            });\n        }).catch(err => {\n            logger.error(err.stack, {\n                file: 'exec',\n                exec: { type: 'script', scriptName: scriptName },\n                requestId: ctx.state.requestId,\n                ip: ctx.ip,\n            });\n            ctx.throw(500, err.message, { expose: env.DEBUG == 'true' });\n        });\n    },\n);\n","// dprint-ignore\nimport launcher from '@framework/launcher.js';\n// dprint-ignore\nimport { reloadCmds } from '@app/common/utils.js';\nimport { commandRouter } from '@app/router/command.js';\n\n(async () => {\n    launcher.mainRouter.use(commandRouter.routes(), commandRouter.allowedMethods());\n    await launcher.run();\n    reloadCmds(launcher.app);\n})();\n"],"mappings":"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","names":["DateTime","path","env","createLogger","format","transports","DailyRotateFile","combine","timestamp","json","errors","LOG_DIR","logFileFormatFactory","logFileName","transInfo","opts","logger","dotenv","path","env","logger","crypto","DateTime","env","initRequest","ctx","next","logger","err","error","logLevel","Router","mainRouter","fs","https","Koa","env","hostname","port","_app","framework_middlewares","Launcher","mainRouter","initRequest","err","ctx","logMeta","logger","options","launcher","launcher_default","env","winston","DailyRotateFile","SentryTransport","logger","LOG_DIR","logFileFormatFactory","info","logger_default","exec","readFile","path","env","my_exec","cmd","resolve","reject","error","stdout","stderr","loadCmds","data","readFile","path","error","logger_default","reloadCmds","app","env","auth","httpBaseAuth","credentials","ctx","next","Router","bodyParser","env","fs","path","commandRouter","Router","bodyParser","httpBaseAuth","env","ctx","cmdId","cmd","my_exec","ret","logger_default","err","scriptName","scriptFile","launcher_default","commandRouter","reloadCmds"]}